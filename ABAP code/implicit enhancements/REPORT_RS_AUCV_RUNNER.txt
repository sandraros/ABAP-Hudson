report rs_aucv_runner message-id s_aucv_runner.

tables:
   tdevc,
   seoaliases,
   tlibg.
data:
  h_prog      type s_aucv_d_prog_other,
  h_mail_addr type ad_smtpadr.

selection-screen begin of block objs with frame title text-000.

selection-screen begin of block header.
parameters:
  b_devc   type s_aucv_d_select_by_devc radiobutton group head
           default 'X' user-command uc_devc,
  b_obj    type s_aucv_d_select_by_prog radiobutton group head.
selection-screen end of block header.

* ----------------- via Package -----------------
selection-screen begin of block devc with frame title text-001.

selection-screen begin of line.
selection-screen comment 1(26)
  text-dvc for field so_devc modif id dvc.
select-options:
   so_devc    for tdevc-devclass no intervals modif id dvc.
selection-screen end of line.

parameters:
  p_packr type s_aucv_d_with_subdevc as checkbox default 'X' modif id dvc
          user-command uc_packr,
  p_excl  type s_aucv_d_exclude_obj as checkbox default ' ' modif id dvc
          user-command uc_excl.

selection-screen begin of block excl with frame title text-007.
select-options:
  so_ndevc for tdevc-devclass     no intervals modif id xc2,
  so_ncl   for seoaliases-clsname no intervals modif id xcl,
  so_nfg   for tlibg-area         no intervals modif id xcl,
  so_npr   for h_prog             no intervals modif id xcl.
selection-screen end of block excl.

selection-screen end of block devc.

* ----------------- via Object Name -----------------
selection-screen begin of block obj with frame title text-002.

data:
  p_selcl type abap_bool,
  p_selfg type abap_bool,
  p_selprg type abap_bool,
  g_adt_uri_is_supported type abap_bool.

select-options:
  so_class for seoaliases-clsname no intervals modif id obj,
  so_fugr for tlibg-area          no intervals modif id obj,
  so_prog for h_prog              no intervals modif id obj.

selection-screen end of block obj.

selection-screen end of block objs.


selection-screen begin of block rsk with frame title text-004.
parameters:
  p_rsklvl type saunit_d_allowed_risk_level
    as  listbox obligatory visible length 30,
  p_durlvl type saunit_d_allowed_rt_duration
    as listbox obligatory visible length 30.
selection-screen end of block rsk.

selection-screen begin of block options with frame title text-003.

parameters:
   b_email   type s_aucv_d_send_email   radiobutton group opt
             default 'X' user-command uc_email,
   b_direct  type s_aucv_d_show_results radiobutton group opt.

selection-screen begin of block send with frame title text-005.
select-options:
  so_email for h_mail_addr no intervals modif id eml. "visible length 60
parameters:
  p_error  type s_aucv_d_error_case_only as checkbox default 'X'
           modif id eml.
selection-screen end of block send.

selection-screen begin of block mail with frame title text-006.
parameters:
  p_detail type s_aucv_d_list_detail as listbox visible length 30 modif id eml,
  p_sapico type abap_bool as checkbox modif id eml default ' ',
  p_adturi type abap_bool as checkbox modif id sml.
selection-screen end of block mail.

selection-screen begin of block aucv with frame title text-008.
parameters:
  p_aucv type s_aucv_d_with_coverage as checkbox default 'X' modif id cov.
selection-screen end of block aucv.

selection-screen end of block options.


class test_runner definition deferred.

types:
  begin of ty_stat_package,
    name                    type string,
    new_Line                type abap_Bool,
    begin of state,
      executed_classes      type i,
      executed_methods      type i,
      skipped_methods       type i,
    end of state,
  end of ty_stat_package,

  ty_stat_packages type standard table of ty_stat_package with non-unique key name,
  ty_packages type standard table of devclass with default key,

  begin of ty_context,
    package          type string,
    program          type string,
    obj_type         type string,
    obj_name         type string,
    test_class       type string,
    test_method      type string,
    adt_resource_uri type string,
  end of ty_context,

  ty_alert_level type c length 6,

  begin of ty_alert,
    context      type ty_context,
    kind         type string,
    description  type string,
    level        type ty_alert_level,
    apply_zebra  type abap_bool,
  end of ty_alert,

  ty_alerts type standard table of ty_alert with default key,

  begin of ty_test_method,
    name        type string,
    alert       type ty_alert,
    begin of state,
      has_been_started  type abap_bool,
      has_been_skipped  type abap_bool,
    end of state,
  end of ty_test_method,
  ty_methods type standard table of ty_test_method with non-unique key name,

  begin of ty_icon,
    passed type string,
    fatal_failure type string,
    critical_failure type string,
    tolerable_failure type string,
    skipped type string,
  end of ty_icon,

  begin of ty_test_class,
    name                         type string,
    handle                       type ref to if_aunit_test_class_handle,
    test_methods                 type ty_methods,
    begin of state,
      has_been_started           type abap_bool,
      has_been_skipped           type abap_bool,
      has_rt_failure             type abap_bool,
      has_timeout                type abap_bool,
      count_exec_methods         type i,
      count_skipped_methods      type i,
      count_skipped_over_methods type i,
    end of state,
  end of ty_test_class,

 ty_test_classes  type standard table of ty_test_class with non-unique key name,

  begin of ty_program,
    name                  type progname,
    obj_type              type tadir-object,
    obj_name              type tadir-obj_name,
    package               type tadir-devclass,
    adt_resource_uri      type string,
    test_classes          type ty_test_classes,
    begin of state,
      has_been_started    type abap_bool,
      has_issue           type abap_bool,
    end of state,
  end of ty_program,

   ty_programs type standard table of ty_program with non-unique key obj_name obj_type,

   begin of ty_time_interval,
      started_on           type sy-datlo,
      started_at           type t,
      finished_on          type sy-datlo,
      finished_at          type sy-timlo,
      time_zone            type sy-zonlo,
   end of ty_time_interval,

   begin of ty_statistics,
      cnt_packages         type i,
      cnt_programs         type i,
      cnt_test_classes     type i,
      cnt_test_methods     type i,

      begin of cnt_method,
        passed            type i,
        with_fatal        type i,
        with_critical     type i,
        with_tolerable    type i,
        skipped           type i,
      end of cnt_method,

      " message
      begin of cnt_failure,
        fatal               type i,
        critical            type i,
        tolerable           type i,
        total               type i,
      end of cnt_failure,

      packages             type ty_stat_packages,

   end of ty_statistics.


***********************************************************************
data:
 g_test_runner type ref to test_runner.

constants:
  begin of c_detail,
    no      type c length 1   value '',
    basic   type c length 1   value 'S',
    full    type c length 1   value 'X',
  end of c_detail.

constants:
  begin of c_level,
    skipped   type ty_alert_level value '1-SKIP' ##no_text,
    tolerable type ty_alert_level value '2-TOLE' ##no_text,
    critical  type ty_alert_level value '3-CRIT' ##no_text,
    fatal     type ty_alert_level value '4-FATA' ##no_text,
  end of c_level.

constants:
  c_alert_id_skipped type c length 4 value 'FM04' ##no_Text,
  c_alert_id_timeout type c length 4 value 'WM20' ##no_Text.


interface lif_aunit_test.
endinterface.

***********************************************************************

class test_runner definition.

  public section.

    data:
      f_programs         type ty_programs             read-only,
      f_au_factory       type ref to cl_aunit_factory   read-only.

    methods:
       run,

       access_test_class
         importing
            i_obj_type   type csequence
            i_obj_name   type csequence
            i_test_class  type csequence,

       access_test_method
         importing
            i_obj_type   type csequence
            i_obj_name   type csequence
            i_test_class type csequence
            i_method     type csequence,

       display_package
         importing
           i_package  type devclass,

       execute_unit_tests,

       get_test_class_handles,

       select_objects,

       select_objects_by_pkg,

       select_objects_by_type,

       select_objects_by_pkg_and_type
         importing
           i_packages type ty_packages,

       settle_objects_after_selection.

endclass.


class aunit_listener definition create private friends lif_aunit_test.
  public section.
    types:
       begin of ty_layout,
         with_execution_details  type abap_bool,
         with_failure_details    type abap_bool,
         with_adt_uri            type abap_bool,
       end of ty_layout.

    interfaces:
      if_aunit_listener.

    class-methods:
      create_listener
        importing
           i_programs   type ty_programs
           i_au_factory type ref to cl_aunit_factory
        returning
          value(result) type ref to aunit_listener.

    methods:
      send_email raising cx_cmp_failure.

  private section.
    methods:
      handle_failure
        importing
          i_kind        type string
          i_ref_failure type ref to if_aunit_info_failure,

      initialize_program_entry
        importing
          i_program_name type csequence,

      update_statistics.


    constants:
      begin of c_kind,
        assert_failure type string value 'Assertion Failure' ##no_text,
        warning        type string value 'Warning' ##no_text,
        cx_failure     type string value 'Exception' ##no_text,
        rt_failure     type string value 'Runtime Abortion' ##no_text,
        skipped        type string value 'Skipped' ##no_text,
        timeout        type string value 'Timeout' ##no_text,
      end of c_kind,
      begin of c_on_miss,
        ignore         type c length 6 value 'ignore' ##no_text,
        assert         type c length 6 value 'assert' ##no_Text,
        create         type c length 6 value 'create' ##no_Text,
      end of c_on_miss.

    data:
      f_programs       type ty_programs,
      f_statistic      type ty_statistics,
      f_alerts         type ty_alerts,
      f_layout         type ty_layout,
      f_time_interval  type ty_time_interval,

      f_test_context   type ty_context,
      f_au_factory     type ref to cl_aunit_factory,
      f_text_api       type ref to if_aunit_text_description.

    methods:
      init,
      compute_base_url returning value(result) type string,
      compute_icon_info returning value(result) type ty_icon,
      compute_icon
        importing
          base_url type string
          sap_icon type string
          alt type string
          title type string
          color type string
        returning value(result) type string.

endclass.



**********************************************************************

initialization.
  perform initialization.

start-of-selection.
  perform start_of_selection.

at selection-screen output.
  perform at_selection_screen_output.

at selection-screen.
  perform at_selection_screen.

**********************************************************************

class test_runner implementation.

  method run.
    select_objects( ).

    if me->f_programs is initial.
      message s000. "No objects were found
      return.
    endif.

    get_test_class_handles( ).
    if me->f_programs is initial.
      message s001. "No unit test class was found
      return.
    endif.

    case abap_true.

      when b_direct or b_email.
        execute_unit_tests( ).

    endcase.

  endmethod.


  method execute_unit_tests.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""$"$\SE:(1) Class TEST_RUNNER, Method EXECUTE_UNIT_TESTS, Start                                                                                               A
*$*$-Start: (1)---------------------------------------------------------------------------------$*$*
ENHANCEMENT 3  ZCAGS_CI_BATCH_FLAG_DISABLE_2.    "active version

  IF ( zcl_cags_ci_report=>get_instance( )->is_on( ) = abap_true ).

    sy-batch = abap_false.

  ENDIF.

ENDENHANCEMENT.
*$*$-End:   (1)---------------------------------------------------------------------------------$*$*
    data:
      duration        type if_aunit_task=>ty_s_duration_setting,
      runmode         type if_aunit_task=>ty_d_run_mode,
      email_listener  type ref to aunit_listener,
      au_task         type ref to if_aunit_task,
      tadir_keys      type sabp_t_tadir_keys,
      tadir_key       type sabp_s_tadir_key.

    field-symbols:
      <program>         type ty_program,
      <test_class>  type ty_test_class.

    if b_email is not initial or sy-batch is not initial.
      email_listener = aunit_listener=>create_listener(
        i_programs = me->f_programs
        i_au_factory = me->f_au_factory ).
      au_task =
         me->f_au_factory->create_task( listener = email_listener ).
    else.
      au_task =
         me->f_au_factory->create_task( ).
    endif.

    au_task->restrict_risk_level( p_rsklvl ).
    au_task->restrict_duration_category( p_durlvl ).

    " email:  online or batch
    " direct: online (not batch)
    if b_email is not initial or sy-batch is not initial.
      loop at me->f_programs assigning <program>.
        loop at <program>-test_classes assigning <test_class>.
          au_task->add_test_class_handle(
            <test_class>-handle ).
        endloop.
      endloop.
      runmode =     if_aunit_task=>c_run_mode-external.

      message 'Starting tests'(pex) type 'S' display like 'I'.
      au_task->run(  runmode ).

      try.
        email_listener->send_email( ).
      catch cx_cmp_failure.
        message 'Sending eMails failed' type 'I' display like 'E' ##no_Text.
      endtry.
    elseif b_direct = abap_true.
      loop at me->f_programs assigning <program>.
        tadir_key-obj_type = <program>-obj_type.
        tadir_key-obj_name = <program>-obj_name.
        insert tadir_key into table tadir_keys.
      endloop.
      call function 'SABP_AU_TEST_ITEMS_FROM_IDE'
        exporting
          tadir_keys                 = tadir_keys
          with_coverage              = p_aucv
          limit_on_risk_level        = p_rsklvl
          limit_on_duration_category = p_durlvl.
    endif.
  endmethod.


  method get_test_class_handles.
    data:
      method_names       type saunit_t_methods,
      method_name        type saunit_d_method,
      method             type ty_test_method,
      test_class         type ty_test_class,
      test_class_handles
        type if_aunit_test_class_handle=>ty_t_testclass_handles.

    field-symbols:
      <program>         type ty_program.

    create object me->f_au_factory.

    loop at me->f_programs assigning <program>.
      test_class_handles =
         me->f_au_factory->get_test_class_handles(
           obj_type = <program>-obj_type
           obj_name = <program>-obj_name  ).

      clear test_class.
      loop at test_class_handles into test_class-handle.

        test_class-name =
          test_class-handle->get_class_name( ).

        method_names =
          test_class-handle->get_test_methods( ).

        loop at method_names into method-name.
          insert method into table test_class-test_methods.
        endloop.

        insert test_class into table <program>-test_classes.
        clear test_class.
      endloop.

    endloop.

    delete me->f_programs where test_classes is initial.

  endmethod.


  method select_objects_by_pkg.
    data:
      package             type devclass,
      selected_packages   type ty_packages,
      expanded_packages   type cl_pak_package_queries=>tt_subpackage_info,
      overall_packages    type ty_packages.

    select devclass from tdevc
        into table selected_packages
        where
          devclass in so_devc.                          "#EC CI_GENBUFF

    if abap_false eq  p_packr. " no sub packages.
      overall_packages = selected_packages.
    else.
      overall_packages = selected_packages.
      loop at selected_packages into package.
        clear expanded_packages.
        cl_pak_package_queries=>get_all_subpackages(
          exporting
            im_package                    = package
          importing
            et_subpackages                = expanded_packages
          exceptions
            others                        = 7 ).
        if ( 'X' eq p_excl and so_ndevc is not initial ).
          delete expanded_packages
            where table_line in so_ndevc.               "#EC CI_SORTSEQ
        endif.
        append lines of expanded_packages to overall_packages.
      endloop.
    endif.

    sort overall_packages.
    delete adjacent duplicates from overall_packages.
    if ( overall_packages is not initial ).
      select_objects_by_pkg_and_type( overall_packages ).
    endif.

  endmethod.

  method select_objects_by_pkg_and_type.
    data:
      tab_rng_obj_name type range of tadir-obj_name,
      package          type devclass.

    assert i_packages is not initial.

    if abap_true eq p_excl and so_ncl is not initial.
      select                                              ##TOO_MANY_ITAB_FIELDS
        object as obj_type                                       "#EC CI_GENBUFF
        obj_name
        devclass as package
        from tadir
        appending corresponding fields of table me->f_programs
        for all entries in i_packages
        where
          devclass = i_packages-table_line and
          pgmid    = 'R3TR' and
          object   = 'CLAS' and
          obj_name not in so_ncl[].
    else.
      select                                              ##TOO_MANY_ITAB_FIELDS
        object as obj_type                                       "#EC CI_GENBUFF
        obj_name
        devclass as package
        from tadir
        appending corresponding fields of table me->f_programs
        for all entries in i_packages
        where
          devclass = i_packages-table_line and
          pgmid    = 'R3TR' and
          object   = 'CLAS'.
    endif.

    if abap_true eq p_excl and so_nfg is not initial.
      select                                              ##TOO_MANY_ITAB_FIELDS
        object as obj_type                                       "#EC CI_GENBUFF
        obj_name
        devclass as package
        from tadir
        appending corresponding fields of table me->f_programs
        for all entries in i_packages
        where
          devclass = i_packages-table_line and
          pgmid    = 'R3TR' and
          object   = 'FUGR' and
          obj_name not in so_nfg[].
    else.
      select                                              ##TOO_MANY_ITAB_FIELDS
        object as obj_type                                       "#EC CI_GENBUFF
        obj_name
        devclass as package
        from tadir
        appending corresponding fields of table me->f_programs
        for all entries in i_packages
        where
          devclass = i_packages-table_line and
          pgmid    = 'R3TR' and
          object   = 'FUGR'.
    endif.

    if abap_true eq p_excl and so_npr is not initial.
      select                                              ##TOO_MANY_ITAB_FIELDS
        object as obj_type                                       "#EC CI_GENBUFF
        obj_name
        devclass as package
        from tadir
        appending corresponding fields of table me->f_programs
        for all entries in i_packages
        where
          devclass = i_packages-table_line and
          pgmid    = 'R3TR' and
          object   = 'PROG' and
          obj_name not in so_npr[].
    else.
      select                                              ##TOO_MANY_ITAB_FIELDS
        object as obj_type                                       "#EC CI_GENBUFF
        obj_name
        devclass as package
        from tadir
        appending corresponding fields of table me->f_programs
        for all entries in i_packages
        where
          devclass = i_packages-table_line and
          pgmid    = 'R3TR' and
          object   = 'PROG'.
    endif.

  endmethod.


  method select_objects_by_type.
    if not p_selcl is initial.
      select                                              ##TOO_MANY_ITAB_FIELDS
        object as obj_type                                       "#EC CI_GENBUFF
        obj_name
        devclass as package
        from tadir
        appending corresponding fields of table me->f_programs
        where
          pgmid = 'R3TR' and
          object = 'CLAS' and
          obj_name in so_class.
    endif.

    if not p_selprg is initial.
      select                                              ##TOO_MANY_ITAB_FIELDS
        object as obj_type                                       "#EC CI_GENBUFF
        obj_name
        devclass as package
        from tadir
        appending corresponding fields of table me->f_programs
        where
          pgmid = 'R3TR' and
          object = 'PROG' and
          obj_name in so_prog.
    endif.

    if not p_selfg is initial.
      select                                              ##TOO_MANY_ITAB_FIELDS
        object as obj_type                                       "#EC CI_GENBUFF
        obj_name
        devclass as package
        from tadir
        appending corresponding fields of table me->f_programs
        where
          pgmid = 'R3TR' and
          object = 'FUGR' and
          obj_name  in so_fugr.
    endif.

  endmethod.


  method settle_objects_after_selection.
    if ( p_selcl is initial ).
      delete me->f_programs
        where
          obj_type = 'CLAS'.
    else.
      delete me->f_programs
        where
          obj_type = 'CLAS' and
          obj_name not in so_class.
    endif.

    if ( p_selprg is initial ).
      delete me->f_programs
        where
          obj_type = 'PROG'.
    else.
      delete me->f_programs
        where
          obj_type = 'PROG' and
          obj_name not in so_prog.
    endif.

    if ( p_selfg is initial ).
      delete me->f_programs
        where
          obj_type = 'FUGR'.
    else.
      delete me->f_programs
        where
          obj_type = 'FUGR' and
          obj_name not in so_fugr.
    endif.

  endmethod.


  method display_package.
    call function 'RS_TOOL_ACCESS'
      exporting
        operation           = 'SHOW'
        object_name         = i_package
        object_type         = 'DEVC'
        in_new_window       = 'X'
      exceptions
        not_executed        = 1
        invalid_object_type = 2
        others              = 3.

    if sy-subrc <> 0.
      message id sy-msgid type 'S' number sy-msgno
              with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    endif.

  endmethod.


  method access_test_class.
    data:
       prog   type progname.

    prog = cl_aunit_prog_info=>tadir_to_progname(
       obj_type = i_obj_type
       obj_name = i_obj_name ).

    check prog is not initial.

    call function 'RS_TOOL_ACCESS'
      exporting
        operation           = 'SHOW'
        object_name         = i_test_class
        object_type         = 'PL'
        enclosing_object    = prog
        in_new_window       = 'X'
      exceptions
        not_executed        = 1
        invalid_object_type = 2
        others              = 3.

    if sy-subrc <> 0.
      message id sy-msgid type 'S' number sy-msgno
              with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    endif.

  endmethod.


  method access_test_method.
    data:
       prog     type progname,
       include  type progname,
       prg_name  type c length 120.

    prog = cl_aunit_prog_info=>tadir_to_progname(
       obj_type = i_obj_type
       obj_name = i_obj_name ).

    check prog is not initial.

    call function 'WB_TREE_GET_INCLUDE'
      exporting
        objectname       = i_test_class
        objecttype       = 'P'
        program          = prog
      importing
        include_name     = include
      exceptions
        index_not_found  = 1
        object_not_found = 2
        others           = 3.

    if sy-subrc <> 0.
      message id sy-msgid type 'S' number sy-msgno
              with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    endif.

    check include is not initial.


    prg_name(40) = i_test_class.
    prg_name+40  = i_method.

    call function 'RS_TOOL_ACCESS'
      exporting
        operation           = 'SHOW'
        object_name         = prg_name
        object_type         = 'OLI'
        enclosing_object    = include
        in_new_window       = 'X'
      exceptions
        not_executed        = 1
        invalid_object_type = 2
        others              = 3.

    if sy-subrc <> 0.
      message id sy-msgid type 'S' number sy-msgno
              with sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    endif.
  endmethod.


  method select_objects.
    data:
      subc type trdir-subc.

    field-symbols:
      <program>  type ty_program.

    call function 'SAPGUI_PROGRESS_INDICATOR'
      exporting
        text = text-p01.

    if b_devc = abap_true.
      select_objects_by_pkg( ).
    elseif b_obj = abap_true.
      select_objects_by_type( ).
    endif.

    " excluded
    if not so_ndevc[] is initial.
      delete me->f_programs
         where package in so_ndevc.
    endif.
    if not so_ncl[] is initial.
      delete me->f_programs
         where obj_type = 'CLAS' and obj_name in so_ncl.
    endif.
    if not so_nfg[] is initial.
      delete me->f_programs
         where obj_type = 'FUGR' and obj_name in so_nfg.
    endif.
    if not so_npr[] is initial.
      delete me->f_programs
         where obj_type = 'PROG' and obj_name in so_npr.
    endif.

    loop at me->f_programs assigning <program>.
      if (  <program>-obj_type = 'PROG' ).
        " no includes
        select single subc from trdir
          into subc
          where
            name = <program>-obj_name and
            subc <> 'I'.  "include
        if ( 0 ne sy-subrc ).
          continue.
        endif.
      endif.
      <program>-name   = cl_aunit_prog_info=>tadir_to_progname(
         obj_type = <program>-obj_type
         obj_name = <program>-obj_name ).
    endloop.
    delete me->f_programs where name is initial.
    sort me->f_programs by package obj_type obj_name.

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""$"$\SE:(2) Class TEST_RUNNER, Method SELECT_OBJECTS, End                                                                                                     A
*$*$-Start: (2)---------------------------------------------------------------------------------$*$*
ENHANCEMENT 2  ZCAGS_CI_COVERAGE_UPDATE.    "active version
" Extract all objects for code coverage measurements
" with empty coverage values by default
DATA lo_zcl_cags_ci_report TYPE REF TO zcl_cags_ci_report.
lo_zcl_cags_ci_report = zcl_cags_ci_report=>get_instance( ).
IF ( lo_zcl_cags_ci_report->is_on( ) = abap_true ).

  DATA lo_coverage TYPE REF TO zcl_cags_ci_code_coverage.
  DATA ls_class_coverage TYPE zcags_ci_code_coverage_s.
  DATA l_object_full_name TYPE string.  " With CP at the end for class
  DATA l_object_name TYPE string.
  DATA l_package_name TYPE string.

  lo_coverage = zcl_cags_ci_code_coverage=>get_instance( ).

  IF ( lo_coverage->is_coverage_enabled( ) = abap_true ).

    loop AT me->f_programs ASSIGNING <program>.

      IF ( <program>-obj_type = 'CLAS' OR
        lo_zcl_cags_ci_report->is_coverage_only_for_classes( ) = abap_false ).

        l_object_name = <program>-obj_name.
        l_object_full_name = <program>-name.
        l_package_name = <program>-package.

        ls_class_coverage = lo_coverage->create_no_covered_class(
          i_object_full_name  = l_object_full_name
          i_object_name       = l_object_name
          i_package_name      = l_package_name
        ).

        IF ( ls_class_coverage IS NOT INITIAL ).

          lo_coverage->add_class_coverage( ls_class_coverage ).

        ENDIF.

      ENDIF.
    ENDLOOP.

    lo_coverage->save_to_memory( ).

  ENDIF.

ENDIF.

ENDENHANCEMENT.
*$*$-End:   (2)---------------------------------------------------------------------------------$*$*
  endmethod.

endclass.


class aunit_listener implementation.

  define mac_assign_program.
    read table me->f_programs
      assigning <program> with key
        obj_type = me->f_Test_Context-obj_type
        obj_name = me->f_Test_Context-obj_name.
    if ( 0 ne sy-subrc ).
      read table me->f_programs
        assigning <program> with key
          name = me->f_Test_Context-program.
    endif.
    if ( 0 ne sy-subrc ).
      case &1.
        when c_on_miss-create.
          insert initial line into table me->f_programs assigning <program>.
          <program>-name =     me->f_Test_Context-program.
          <program>-obj_type = me->f_Test_Context-obj_type.
          <program>-obj_name = me->f_Test_Context-obj_name.
        when c_on_miss-ignore.
          unassign <program>.
        when others.
          assert 1 = 2.
      endcase.
    endif.
  end-of-definition.

  define mac_assign_test_class.
    mac_Assign_Program &1.
    if ( <Program> is assigned ).
      read table <program>-test_classes assigning <test_class>
        with key name = me->f_Test_Context-test_class.
      if ( 0 ne sy-subrc ).
        case &1.
          when c_on_miss-create.
            insert initial line into table <program>-test_classes assigning <test_class>.
            <test_class>-name = me->f_Test_Context-test_class.
          when c_on_miss-ignore.
            unassign <Test_Class>.
          when others.
            assert 1 = 2.
        endcase.
      endif.
    else.
      unassign <Test_Class>.
    endif.
  end-of-definition.

  define mac_assign_test_method.
    mac_Assign_Test_Class &1.
    if ( <Test_class> is assigned ).
      read table <test_class>-test_methods assigning <test_method>
        with key name = me->f_Test_Context-test_method.
      if ( 0 ne sy-subrc ).
        case &1.
          when c_on_miss-create.
            insert initial line into table <test_class>-test_methods assigning <test_method>.
            <test_method>-name = me->f_Test_Context-test_method.
          when c_on_miss-ignore.
            unassign <test_method>.
          when others.
            assert 1 = 2.
        endcase.
      endif.
    else.
      unassign <test_method>.
    endif.
  end-of-definition.


  method create_listener.
    create object result.
    result->f_programs =    i_programs.
    if ( i_au_factory is bound ).
      result->f_au_factory =  i_au_factory.
    else.
      create object result->f_au_factory.
    endif.
    result->init( ).

  endmethod.


  method send_email.
    constants:
      c_area     type c length 4 value 'MAIN',  "csequence
      c_template type syrepid    value 'RS_AUCV_RUNNER_MAIL_TEMPLATE'.
    data:
      name          type string,
      xpt_caught    type ref to cx_root,
      html_composer type ref to cl_cmp_composer,
      text_lines    type cl_cmp_composer=>tab_code,
      string        type string,
      title         type string,
      icon_info     type ty_icon,
      email         like line of so_email[],
      programs      type ty_programs.
    field-symbols:
     <text>         like line of text_lines.

    if p_error is not initial and
       me->f_statistic-cnt_failure-fatal    is initial and
       me->f_statistic-cnt_failure-critical is initial and
      me->f_statistic-cnt_failure-tolerable is initial.
      message 'All unit tests successful -> No Email'(k00) type 'S'.
      exit.
    endif.

    icon_info = compute_icon_info( ).
    if ( me->f_alerts is not initial ).
      me->f_layout-with_failure_details =   'X'.
    endif.

    case p_detail.
      when c_detail-full.
        programs = me->f_programs.
        if ( programs is not initial ).
          me->f_layout-with_execution_details = abap_true.
        endif.
      when c_detail-basic.
        programs = me->f_programs.
        delete programs where state-has_issue eq abap_false.
        if ( programs is not initial ).
          me->f_layout-with_execution_details = abap_true.
        endif.
      when others.
        me->f_layout-with_execution_details = abap_false.
    endcase.

    html_composer = cl_cmp_composer=>s_create( ).
    html_composer->add_var( i_name = :
       'i_statistic'      i_value = me->f_statistic ),
       'i_alerts'         i_value = me->f_alerts ),
       'i_programs'       i_value = programs ),
       'i_layout'         i_value = me->f_layout ),
       'i_duration'       i_value = me->f_time_interval ),
       'i_icon'           i_value = icon_info ).

    try.
      text_lines =
        html_composer->build_code(
          i_area             = c_area  " 'MAIN'
          i_template_include = c_template ).

    cleanup into xpt_caught.
      message xpt_caught type 'I' display like 'E'.
    endtry.

    read table text_lines into title index 1.
    delete text_lines index 1.
    loop at text_lines assigning <text>.
      condense <text>.
    endloop.

    cl_aucv_job_utilities=>send_emails(
      i_title         = title
      i_tab_rng_email = so_email[]
      i_tab_lines     = text_lines
      i_flg_html      = abap_true ).

    commit work.

  endmethod.


  method compute_base_url.
    data:
      host type string,
      port type string,
      protocol type string.

    try.
      cl_http_server=>get_location(
       exporting
         protocol     = 'HTTP'
       importing
         host         = host
         port         = port
         out_protocol = protocol ).
    catch cx_root ##catch_all.
      return.
    endtry.
    if ( host is not initial ).
      concatenate protocol '://' host ':' port into result.
    endif.

  endmethod.


  method compute_icon_info.
    data: base_url type string.
    constants:
      begin of c_alt,
        passed type string value            `&#x2714;` ##no_text,
        skipped type string value           `&#x27a5;` ##no_text,
        tolerable_failure type string value `&#x25ce;` ##no_Text,
        critical_failure type string value  `&#x25b2;` ##no_text,
        fatal_failure type string value     `&#x2726;` ##no_text,
      end of c_alt,
      begin of c_color,
        passed type string value            `green`  ##no_text,
        skipped type string value           `grey`   ##no_text,
        tolerable_failure type string value `orange` ##no_text,
        critical_failure type string value  `red`    ##no_text,
        fatal_failure type string value     `red`    ##no_text,
      end of c_color,
      begin of c_title,
        passed type string value            `Test Passed` ##no_text,
        skipped type string value           `Test Skipped` ##no_text,
        tolerable_failure type string value `Tolerable Failure` ##no_text,
        critical_failure type string value  `Critical Failure` ##no_text,
        fatal_failure type string value     `Fatal Failure` ##no_text,
      end of c_title,
      begin of c_sap_icon,
        passed type string value            `ICON_LED_GREEN`,
        skipped type string value           `ICON_DEBUGGER_STEP_OVER`,
        tolerable_failure type string value `ICON_MESSAGE_WARNING_SMALL`,
        critical_failure type string value  `ICON_MESSAGE_ERROR_SMALL`,
        fatal_failure type string value     `ICON_MESSAGE_CRITICAL_SMALL`,
      end of c_sap_icon.


    define mac_compute_icon.
      result-&1 =
        compute_Icon(
          base_url = base_url
          sap_Icon = c_sap_icon-&1
          alt = c_alt-&1
          title = c_title-&1
          color = c_color-&1 ).

    end-of-definition.

    if ( abap_true eq p_sapico ).
      base_url = compute_base_url( ).
    endif.

    mac_compute_icon:
      passed,
      skipped,
      tolerable_failure,
      fatal_failure,
      critical_failure.

  endmethod.


  method compute_icon.
    data:
      image type string.
    if ( base_url is initial ).
      result = `<b style="color:$">$</b>` ##no_text.
      replace first occurrence of '$' in result with: color, alt.
    else.
      image = base_url && cl_bsp_mimes=>sap_icon( sap_icon ).
      result = `<img src="$" title="$" alt="$">` ##no_text.
      replace first occurrence of '$' in result with:  image, title, 'A'.
    endif.

  endmethod.


  method init.
    field-symbols:
      <test_class>   type ty_test_class,
      <test_method>  type ty_test_method,
      <program>      type ty_program.

    me->f_text_api = me->f_au_factory->get_text_converter( language = 'E' ).
    if ( abap_true eq g_adt_uri_is_supported and abap_true eq p_adturi ).
      me->f_layout-with_adt_uri = abap_true.
    else.
      me->f_layout-with_adt_uri = abap_false.
    endif.

    loop at me->f_programs assigning <program>.
      clear <program>-state.
      loop at <program>-test_classes assigning <test_class>.
        clear <test_class>-state.
        loop at <test_class>-test_methods assigning <test_method>.
          clear <test_method>-state.
        endloop.
      endloop.
    endloop.

    clear me->f_time_interval.
    get time.
    me->f_time_interval-started_on = sy-datlo.
    me->f_time_interval-started_at = sy-timlo.
    me->f_time_interval-time_zone =  sy-zonlo.

  endmethod.


  method if_aunit_listener~task_start.
    clear:
      me->f_test_context,
      me->f_statistic,
      me->f_alerts.

  endmethod.


  method if_aunit_listener~program_start.
    data:
      descr          type if_aunit_text_description=>ty_s_description,
      package        type ty_stat_package,
      message_text   type string.
    field-symbols:
      <program>      type ty_program.

    clear me->f_test_context-test_method.

    descr = info->get_description( ).
    read table descr-params index 1 into
       me->f_test_context-program.

    initialize_program_entry(  me->f_test_context-program ).
    mac_assign_program c_on_miss-assert.
    <program>-state-has_been_started = abap_true.
    me->f_test_context-obj_name = <program>-obj_name.
    me->f_test_context-obj_type = <program>-obj_type.
    me->f_test_context-package =  <program>-package.

    add 1 to me->f_statistic-cnt_programs.
    read table me->f_statistic-packages
      with key name = <program>-package transporting no fields.
    if ( 0 ne sy-subrc ).
      package-name = <program>-package.
      insert package into table me->f_statistic-packages.
    endif.

  endmethod.


  method if_aunit_listener~class_start.
    data:
      descr         type if_aunit_text_description=>ty_s_description.
    field-symbols:
      <test_class>  type ty_test_class,
      <program>     type ty_program.

    clear me->f_test_context-test_class.
    clear me->f_test_context-test_method.

    descr = info->get_description( ).
    read table descr-params
      index 1 into me->f_test_context-test_class.
    mac_assign_test_class c_on_miss-create.
    <test_class>-state-has_been_started = abap_true.
    add 1 to me->f_statistic-cnt_test_classes.

  endmethod.


  method if_aunit_listener~method_start.
    data:
      descr         type if_aunit_text_description=>ty_s_description.
    field-symbols:
      <test_method> type ty_test_method,
      <test_class>  type ty_test_class,
      <program>     type ty_program.

    clear me->f_test_context-test_method.

    descr = info->get_description( ).
    read table descr-params index 1 into
       me->f_test_context-test_method.

    mac_assign_test_method c_on_miss-create.
    <test_method>-state-has_been_started = abap_true.
    add 1 to <test_class>-state-count_exec_methods.

  endmethod.

  method if_aunit_listener~method_end.
    field-symbols:
      <program>       type ty_program,
      <test_class>    type ty_test_class,
      <test_method>   type ty_test_method.

    mac_assign_test_method c_on_miss-assert.
    if ( <test_method>-alert is initial ).
      add 1 to me->f_statistic-cnt_method-passed.
    else.
      case <test_method>-alert-level.
        when c_level-skipped.
          add 1 to me->f_statistic-cnt_method-skipped.
          add 1 to <test_class>-state-count_skipped_methods.
        when c_level-fatal.
          add 1 to me->f_statistic-cnt_method-with_fatal.
        when c_level-critical.
          add 1 to me->f_statistic-cnt_method-with_critical.
        when c_level-tolerable.
          add 1 to me->f_statistic-cnt_method-with_tolerable.
        when others.
          clear sy-subrc.
      endcase.
    endif.

    clear:
      me->f_test_context-test_method.

  endmethod.


  method if_aunit_listener~class_end.
    field-symbols:
      <program>            type ty_program,
      <test_class>         type ty_test_class,
      <test_method>        type ty_test_method.

    mac_assign_test_class c_on_miss-assert.

    case abap_true.
      when <test_class>-state-has_been_skipped.
        loop at <test_class>-test_methods assigning <test_method>
          where
            state-has_been_started = abap_false.
          <test_method>-state-has_been_skipped = abap_true.
          add 1 to me->f_statistic-cnt_method-skipped.
          add 1 to <test_class>-state-count_skipped_methods.
          add 1 to <test_class>-state-count_skipped_over_methods.
        endloop.
      when <test_class>-state-has_rt_failure or
           <test_class>-state-has_timeout.
        if ( <test_class>-state-count_exec_methods is initial ).
          " at least one method must have caused the rt failure or timeout
          " already done add 1 to me->f_statistic-cnt_method-
          add 1 to <test_class>-state-count_exec_methods.
          add 1 to me->f_statistic-cnt_test_methods.
        endif.
    endcase.

    clear:
      me->f_test_context-test_class,
      me->f_test_context-test_method.

  endmethod.


  method if_aunit_listener~program_end.
    field-symbols:
      <program>            type ty_program,
      <package>            type ty_stat_package,
      <test_class>         type ty_test_class.

    mac_assign_program c_on_miss-assert.
    clear me->f_test_context.
    read table me->f_statistic-packages[]
      assigning <package>
      with key name = <program>-package.
    assert <package> is assigned.

    loop at <program>-test_classes[]
      assigning <test_class>
      where state-has_been_started = abap_true.
      <package>-state-executed_classes =
        <package>-state-executed_classes + 1.
      <package>-state-executed_methods =
        <package>-state-executed_methods + <test_class>-state-count_exec_methods.
      <package>-state-skipped_methods =
        <package>-state-skipped_methods + <test_class>-state-count_skipped_methods.
    endloop.

  endmethod.


  method if_aunit_listener~task_end.
    delete adjacent duplicates from me->f_statistic-packages.
    update_statistics( ).

  endmethod.


  method handle_failure.
    data:
      adjust_method_totals type abap_bool,
      native_level   type aunit_level,
      alert          type ty_alert,
      descr          type if_aunit_text_description=>ty_s_description,
      count          type i.
    field-symbols:
      <program>      type ty_program,
      <test_class>   type ty_test_class,
      <test_method>  type ty_test_method.

    mac_assign_test_method c_on_miss-ignore.

    if ( <program> is assigned ).
      <program>-state-has_issue = abap_true.
    endif.

    descr = i_ref_failure->get_header_description( ).
    alert-kind = i_kind.
    alert-context = me->f_test_context.
    alert-description = me->f_text_api->get_string( descr ).
    alert-description =
      escape( val = alert-description format = cl_abap_format=>e_html_text ).

    if i_kind = c_kind-skipped.
      alert-level = c_level-skipped.
      if ( <test_method> is assigned ).
        <test_method>-state-has_been_skipped = abap_true.
        <test_class>-state-has_been_skipped = abap_true.
      elseif ( <test_class>  is assigned ).
        <test_class>-state-has_been_skipped = abap_true.
      endif.

    else.
      native_level = i_ref_failure->get_level( ).
      case native_level.
        when if_aunit_constants=>fatal.
          add 1 to me->f_statistic-cnt_failure-fatal.
          alert-level = c_level-fatal.
        when if_aunit_constants=>critical.
          add 1 to me->f_statistic-cnt_failure-critical.
          alert-level = c_level-critical.
        when others.
          add 1 to me->f_statistic-cnt_failure-tolerable.
          alert-level = c_level-tolerable.
      endcase.
      if ( <test_method> is not assigned and <test_class> is assigned ).
        " a timeout or runtime abortion is reported on class level
        " however it happened within a method. Fix totals in such a case
        " by the assumption that at least one method has been executed
        case i_kind.
          when c_kind-rt_failure.
            <test_class>-state-has_rt_failure = abap_true.
            adjust_method_totals = abap_true.
          when c_kind-timeout.
             <test_class>-state-has_timeout = abap_true.
             adjust_method_totals = abap_true.
          when others.
             adjust_method_totals = abap_false.
        endcase.
        if ( abap_true =  adjust_method_totals ).
          case native_level.
            when if_aunit_constants=>fatal.
              add 1 to me->f_statistic-cnt_method-with_fatal.
            when if_aunit_constants=>critical.
              add 1 to me->f_statistic-cnt_method-with_critical.
            when others.
              add 1 to me->f_statistic-cnt_method-with_tolerable.
          endcase.
        endif.
      endif.
    endif.

    count = lines( me->f_alerts ).
    count = count mod 2.
    if ( 1 = count ).
      alert-apply_zebra = abap_true.
    endif.

    insert alert into table me->f_alerts[].

    if <test_method> is assigned.
      if <test_method>-alert-level < alert-level.
        <test_method>-alert = alert.
      endif.
    endif.
  endmethod.


  method if_aunit_listener~assert_failure.
    data:
      header type if_aunit_text_description=>ty_s_description.
    header = failure->get_header_description( ).
    case header-id.
      when c_alert_id_skipped.
        handle_failure( i_kind = c_kind-skipped i_ref_failure = failure ).

      when c_alert_id_timeout.
        handle_failure( i_kind = c_kind-timeout i_ref_failure = failure ).

      when others.
        handle_failure( i_kind = c_kind-assert_failure i_ref_failure = failure ).

    endcase.
  endmethod.


  method if_aunit_listener~warning.
    data:
      header type if_aunit_text_description=>ty_s_description.
    header = warning->get_header_description( ).
    case header-id.
      when c_alert_id_skipped.
        handle_failure( i_kind = c_kind-skipped i_ref_failure = warning ).

      when c_alert_id_timeout.
        handle_failure( i_kind = c_kind-timeout i_ref_failure = warning ).

      when others.
        handle_failure( i_kind = c_kind-warning i_ref_failure = warning ).

    endcase.

  endmethod.


  method if_aunit_listener~cx_failure.
    handle_failure( i_kind = c_kind-cx_failure i_ref_failure = failure ).

  endmethod.


  method if_aunit_listener~rt_failure.
    handle_failure( i_kind = c_kind-rt_failure i_ref_failure = failure ).

  endmethod.


  method if_aunit_listener~execution_event ##needed.
  endmethod.


  method initialize_program_entry.
    data:
      escaped_name   type string,
      program type ty_program.
    field-symbols:
      <program> type ty_program.

    read table me->f_programs with key
      name = i_program_name
      assigning <program>.
    if ( 0 ne sy-subrc ).
      program-name = i_program_name.
      cl_aunit_prog_info=>progname_to_tadir(
        exporting
          progname = program-name
        importing
          obj_name = program-obj_name
          obj_type = program-obj_type ).
      insert program into table me->f_programs assigning <program>.
    endif.

    if ( abap_true eq me->f_layout-with_adt_uri and
         <program>-obj_name is not initial ).
      escaped_name =
        escape( val = <program>-obj_name format = cl_abap_format=>e_uri_full ).

      case <program>-obj_type.
        when 'CLAS'.
          me->f_test_context-adt_resource_uri =
           'adt://' && sy-sysid && '/sap/bc/adt/oo/classes/' && escaped_name ##no_Text.

        when 'PROG'.
          me->f_test_context-adt_resource_uri =
           'adt://' && sy-sysid && '/sap/bc/adt/programs/programs/' && escaped_name ##no_Text.

        when 'FUGR'.
          me->f_test_context-adt_resource_uri =
          'adt://' && sy-sysid && '/sap/bc/adt/functions/groups/' && escaped_name ##no_Text.

        when others.
          clear me->f_test_context-adt_resource_uri.

      endcase.
      <program>-adt_resource_uri = me->f_test_context-adt_resource_uri.
    endif.

  endmethod.


  method update_statistics.
    data:
      fraction_Of_4        type i,
      nbr_Of_Fill_Entries  type i.
    field-symbols:
      <test_class>         type ty_test_class,
      <program>            type ty_program,
      <package>            type ty_stat_package.

    loop at me->f_programs assigning <program> where state is not initial.
      add 1 to f_statistic-cnt_programs.
      loop at <program>-test_classes assigning <test_class> where state is not initial.
        add 1 to f_statistic-cnt_test_classes.
        loop at <test_class>-test_methods transporting no fields where state is not initial.
          add 1 to f_statistic-cnt_test_methods.
        endloop.
      endloop.
    endloop.

    me->f_statistic-cnt_packages = lines( me->f_statistic-packages ).

    me->f_statistic-cnt_failure-total =
      me->f_statistic-cnt_failure-critical +
      me->f_statistic-cnt_failure-fatal +
      me->f_statistic-cnt_failure-tolerable.

    get time.
    me->f_time_interval-finished_on = sy-datlo.
    me->f_time_interval-finished_at = sy-timlo.
    if ( me->f_time_interval-finished_on < me->f_time_interval-started_on  or
         me->f_time_interval-time_zone  <> sy-zonlo ).
      clear me->f_time_interval-finished_on.
      clear me->f_time_interval-finished_at.
    elseif ( me->f_time_interval-finished_on = me->f_time_interval-started_on  ).
      clear me->f_time_interval-finished_on.
    endif.

    " prepare package data to ease rendering
    sort me->f_Statistic-packages by name ascending.
    if ( me->f_Statistic-packages is not initial ).
      loop at me->f_Statistic-packages assigning <package>.
        fraction_Of_4 = sy-tabix  mod 4.
        if ( 1 eq fraction_Of_4 and sy-tabix <> 1 ).
          <package>-new_line = abap_True.
        endif.
      endloop.
      nbr_Of_Fill_Entries = ( 4 - fraction_Of_4 ) mod 4.
      do nbr_Of_Fill_Entries times.
        insert initial line into table me->f_Statistic-packages.
      enddo.
    endif.

  endmethod.

endclass.


**********************************************************************

form initialization.
  p_rsklvl = cl_aunit_permission_control=>get_max_risk_level( ).
  p_durlvl = if_aunit_attribute_enums=>c_duration-long.

  if ( abap_false eq sy-batch ).
    perform sub_get_default_variant.
  endif.
  if ( '731' <= sy-saprl ).
    g_adt_uri_is_supported = abap_true.
    p_adturi = cl_aunit_permission_control=>is_sap_system( ).
  else.
    g_adt_uri_is_supported = abap_false.
    p_adturi = abap_false.
  endif.


endform.


form at_selection_screen_output.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""$"$\SE:(3) Form AT_SELECTION_SCREEN_OUTPUT, Start                                                                                                            A
*$*$-Start: (3)---------------------------------------------------------------------------------$*$*
ENHANCEMENT 2  ZCAGS_CI_BATCH_FLAG_DISABLE_2.    "active version

  IF ( zcl_cags_ci_report=>get_instance( )->is_on( ) = abap_true ).

    sy-batch = abap_false.

  ENDIF.

ENDENHANCEMENT.
*$*$-End:   (3)---------------------------------------------------------------------------------$*$*
*==============================
  data:
    tab    type string_table.

  call function 'RS_SET_SELSCREEN_STATUS'
    exporting
      p_status  = 'STAT1000'
    tables
      p_exclude = tab.

  perform sub_mode.
endform.


form at_selection_screen.
*=======================
  if sy-ucomm = 'ONLI' or sy-ucomm = 'SJOB'.
    if b_devc = abap_true.
      if so_devc[] is not initial.
        p_selcl = p_selfg = p_selprg = abap_true.
      else.
        message e002. "check devc not initial
      endif.
    endif.
    if b_obj = abap_true.
      if so_class[] is initial and
         so_fugr[]  is initial and
         so_prog[]  is initial.
        message e003. "check devc not initial
      endif.
      clear: p_selcl, p_selfg, p_selprg.
      if so_class[] is not initial.
        p_selcl = abap_true.
      endif.
      if so_fugr[]  is not initial.
        p_selfg = abap_true.
      endif.
      if so_prog[]  is not initial.
        p_selprg = abap_true.
      endif.
    endif.
  endif.
  if sy-ucomm = 'SJOB' and b_direct = abap_true.
    message e004. "check devc not initial
  endif.
  if ( sy-ucomm = 'ONLI' or sy-ucomm = 'SJOB' )
       and b_email = abap_true and so_email[] is initial.
    message e005. "check devc not initial
  endif.

endform.

form sub_mode.
*============
  loop at screen.
    case screen-group1.
      when 'DVC'.
        if b_devc = abap_true.
          screen-active = 1.
          screen-invisible = 0.
        else.
          screen-active = 0.
          screen-invisible = 1.
        endif.
      when 'OBJ'.
        if b_obj = abap_true.
          screen-active = 1.
          screen-invisible = 0.
        else.
          screen-active = 0.
          screen-invisible = 1.
        endif.
      when 'XCL' or 'XC2'.
        if p_excl = abap_true and b_devc = abap_true.
          screen-active = 1.
          screen-invisible = 0.
          if p_packr = abap_false and screen-group1 = 'XC2'.
            screen-active = 0.
            screen-invisible = 1.
          endif.
        else.
          screen-active = 0.
          screen-invisible = 1.
        endif.
      when 'EML'.
        if b_email = abap_true.
          screen-active = 1.
          screen-invisible = 0.
        else.
          screen-active = 0.
          screen-invisible = 1.
        endif.
      when 'SML'.
        if b_email = abap_true and g_adt_uri_is_supported = abap_true.
          screen-active = 1.
          screen-invisible = 0.
        else.
          screen-active = 0.
          screen-invisible = 1.
        endif.
      when 'COV'.
        if b_direct = abap_true.
          screen-active = 1.
          screen-invisible = 0.
        else.
          screen-active = 0.
          screen-invisible = 1.
        endif.
      when others. continue.
    endcase.
    modify screen.
  endloop.

endform.


form start_of_selection.
*======================
  create object g_test_runner.
  g_test_runner->run( ).

endform.


form sub_get_default_variant.
*===========================
  " initialize selection screen by variant == user name
  data: my_repid   type syrepid.
  data: my_subrc   type sysubrc.
  data: my_variant type raldb_vari.

  my_variant = sy-uname.
  my_repid   = sy-repid.

  call function 'RS_VARIANT_EXISTS'
    exporting
      report  = my_repid
      variant = my_variant
    importing
      r_c     = my_subrc.

  if my_subrc = 0.
    call function 'RS_SUPPORT_SELECTIONS'
      exporting
        report  = my_repid
        variant = my_variant
      exceptions
        others  = 0.
  endif.

endform.

class tc_statistics definition for testing
    inheriting from cl_aunit_assert
    risk level harmless duration short.

  public section.
    interfaces:
      lif_aunit_test.

  private section.
    methods:
      setup,
      critical_failures for testing,
      tolerable_failures for testing,
      skipped for testing.

    data:

     listener type ref to aunit_listener,
     driver type ref to test_runner,
     failure type ref to if_aunit_info_failure.


endclass.


class td_failure definition create private for testing.

  public section.
    interfaces:
      if_aunit_info_failure.
    class-methods:
      create
        importing
          i_level type aunit_level optional
          i_id    type sychar04 optional
        preferred parameter i_level
        returning
          value(r_instance) type ref to td_failure.


  private section.
    data:
       level type aunit_level.
endclass.


class td_failure implementation.
  method create.
    create object r_instance.
    r_instance->level = i_level.
  endmethod.

  method if_aunit_info_failure~get_level.
    result = level.
  endmethod.

  method if_aunit_info_failure~get_stack_description ##needed.
  endmethod.

  method if_aunit_info_message~get_analysis_description ##needed.
  endmethod.

  method if_aunit_info_message~get_analysis_documents ##needed.
  endmethod.

  method if_aunit_info_message~get_complete_description ##needed.
  endmethod.

  method if_aunit_info_message~get_header_description ##needed.
  endmethod.
endclass.


class tc_statistics implementation.

  method setup.
    create object driver.
    listener = aunit_listener=>create_listener(
      i_programs = driver->f_programs i_au_factory = driver->f_au_factory ).

  endmethod.

  method critical_failures.
    failure = td_failure=>create( if_aunit_constants=>critical ).

    listener->if_aunit_listener~assert_failure( failure ).
    listener->if_aunit_listener~assert_failure( failure ).

    assert_equals( act = listener->f_statistic-cnt_failure-critical
                   exp = 2 ).

  endmethod.

  method tolerable_failures.
    failure = td_failure=>create( if_aunit_constants=>tolerable ).

    listener->if_aunit_listener~assert_failure( failure ).
    listener->if_aunit_listener~assert_failure( failure ).
    listener->if_aunit_listener~assert_failure( failure ).

    assert_equals(
      act = listener->f_statistic-cnt_failure-tolerable
      exp = 3 ).

  endmethod.

  method skipped.
    failure = td_failure=>create( i_id = c_alert_id_skipped ).

    listener->if_aunit_listener~assert_failure( failure ).
    listener->if_aunit_listener~assert_failure( failure ).
    listener->if_aunit_listener~assert_failure( failure ).

    assert_equals(
      act = listener->f_statistic-cnt_failure-tolerable
      exp = 3 ).

  endmethod.

endclass.
